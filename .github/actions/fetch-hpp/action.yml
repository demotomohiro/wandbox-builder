name: fetch-hpp

description: Fetch Header-Only Library

inputs:
  name:
    description: Library Name
    required: true
  repository:
    description: Repository
    required: true
  # 何のヘッダーをインクルードするか
  # 単に説明のための文字列なので、実在する必要は無い
  # （`<mylib/*.hpp>` みたいに記載しても良い）
  header_description:
    description: Header Description
    required: true
  # ヘッダーファイルがある場所
  # チェックアウトしたリポジトリからの相対パス
  header_dir:
    description: Header Directory
    required: true
  find_args:
    description: Header Find Arguments
    required: false
    default: ""
  # ヘッダーファイルのコピー先のディレクトリ
  # フルパスにする必要がある
  # -I${{ hpplib_dir }} でコンパイラに渡すディレクトリ
  hpplib_dir:
    description: Library Output Directory
    required: true
  # リポジトリの情報
  # フルパスにする必要がある
  hpplib_info:
    description: Library Information File
    required: true

runs:
  using: composite
  steps:
    - id: info
      run: |
        # リリース情報を取得する
        gh release list --repo ${{ inputs.repository }} --json name,tagName,isLatest,isDraft,isPrerelease,createdAt,publishedAt --jq '.[] | select(.isLatest)' > _info.json

        # ライブラリ名、リポジトリ名、ヘッダーの説明を追加で入れる
        jq '. += {"name":"${{ inputs.name }}","repository":"${{ inputs.repository }}","headerDescription":"${{ inputs.header_description }}"}' _info.json > _info2.json

        # リポジトリの description も入れる
        gh repo view ${{ inputs.repository }} --json description > _repo.json
        jq -s '.[0] += .[1] | .[0]' _info2.json _repo.json > _info3.json

        echo "jsonfile=`pwd`/_info3.json" >> $GITHUB_OUTPUT
        echo "tagname=`cat _info3.json | jq -r '.tagName'`" >> $GITHUB_OUTPUT
      shell: bash
    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        path: ${{ inputs.repository }}
        ref: ${{ steps.info.outputs.tagname }}
    - run: |
        mkdir -p ${{ inputs.hpplib_dir }}
        pushd ${{ inputs.header_dir }}
          find . ${{ inputs.find_args }} -type f -exec cp --parents {} "${{ inputs.hpplib_dir }}" \;
        popd
        if [ ! -e ${{ inputs.hpplib_info }} ]; then
          echo '[]' > ${{ inputs.hpplib_info }}
        fi
        jq -s '.[0] += [.[1]] | .[0]' ${{ inputs.hpplib_info }} ${{ steps.info.outputs.jsonfile }} > _tmp.json
        mv _tmp.json ${{ inputs.hpplib_info }}
      shell: bash
      working-directory: ${{ inputs.repository }}
